grammar Tequila

  rule program
    allow_space configuration:configuration_line* expression allow_space {
      def eval(binding)
        tree = Tequila::Tree.new
        configuration.elements.each {|cl| cl.eval(tree)}
        expression.eval(tree, tree.root, binding)
      end
    }
  end

  rule configuration_line
    allow_space '#!' key:term allow_space value:term? {
      def eval(tree)
        if value.text_value.blank?
          tree.config.send(key.text_value.intern)
        else
          tree.config.send(key.text_value.intern, value.text_value)
        end
      end
    }
  end

  rule expression
    source_keyword var_type:('@'/'@@'/'$')? object {
      def eval(tree, parent, binding)
        object.eval(tree, parent, binding, :variable, {:var_type => var_type.text_value})
      end
    }
  end

  rule source_keyword
   '-' allow_space
   / 'source' must_space
  end

  rule object
    data_mark? object_name:term suppress_label:'~'? label:label_decl? atd:attributes_decl? mtd:methods_decl? std:statics_decl? cbd:code_decl* asd:association_decl* gld:gluing_decl* eob {

      def name
        object_name.text_value
      end

      def eval(tree, parent, binding, type, params ={})

        node = Tequila::Node.new((:variable == type) ? params[:var_type] + name : name, type).eval(binding)

        unless suppress_label.empty?
          node.suppress_label = true
        end

        if label.elements
          node.label = label.term.text_value
        end

        if atd.elements
          atd.update_node(node)
        end

        if std.elements
          std.update_node(node)
        end

        if mtd.elements
          mtd.update_node(node)
        end

        if cbd.elements
          cbd.elements.each {|cb| cb.update_node(node)}
        end

        tree.add_child_to(parent, node)

        asd.elements.each {|e| e.eval(tree, node, binding) }
        gld.elements.each {|e| e.eval(tree, node, binding) }

        tree
      end
    }
  end

  rule association_decl
    allow_space ('+' allow_space /'join' must_space) object {
      def eval(tree, node, binding)
        object.eval(tree, node, binding, :association)
      end
    }
  end

  rule gluing_decl
    allow_space ('<' allow_space /'merge' must_space) object {
      def eval(tree, node, binding)
        object.eval(tree, node, binding, :bounded)
      end
    }
  end

  rule attributes_decl
    allow_space ':'? (only_attributes_decl / except_attributes_decl) {
      def update_node(node)
        elements[2].update_node(node)
      end
    }
  end

  rule only_attributes_decl
    (allow_space atd:pick_all_decl+
    / ('only'/'pick') atd:only_attribute_decl+) {
      def update_node(node)
        if atd.elements
          atd.elements.each {|x| x.update_node(node, :only)}
        end
      end
    }
  end

  rule except_attributes_decl
    (allow_space atd:drop_all_decl+
    / ('except'/'drop') atd:except_attribute_decl+) {
      def update_node(node)
        if atd.elements
          atd.elements.each {|x| x.update_node(node, :except)}
        end
      end
    }
  end

  rule pick_all_decl
   'pick' must_space 'all' {
     def update_node(node, _)
       node.all_attributes!
     end
   }
  end

  rule drop_all_decl
   'drop' must_space 'all' {
     def update_node(node, _)
       node.no_attributes!
     end
   }
  end


  rule only_attribute_decl
    allow_space '.' term label:label_decl? {
      def update_node(node, key)
        m = Tequila::Node::Attribute.new(term.text_value)
        if label.elements
          m.label = label.term.text_value
        end
        node.add_attribute(key, m)
      end
    }
  end

  rule except_attribute_decl
    allow_space '.' term {
      def update_node(node, key)
        m = Tequila::Node::Attribute.new(term.text_value)
        node.add_attribute(key, m)
      end
    }
  end

  rule attribute_decl
    allow_space '.' term label:label_decl? {
      def update_node(node, key)
        m = Tequila::Node::Attribute.new(term.text_value)
        if label.elements
          m.label = label.term.text_value
        end
        node.add_attribute(key, m)
      end
    }
  end

  rule methods_decl
    allow_space ':'? 'methods' mtd:(method_decl)+ {
      def update_node(node)
        mtd.elements.each {|x| x.update_node(node)}
      end
    }
  end

  rule method_decl
    allow_space '.' term params:('(' allow_space first_param:(!(','/')') .)+ allow_space rest_params:(',' allow_space param:(!(','/')') .)+ allow_space)* ')')? label:label_decl? {
      def update_node(node)
        m = Tequila::Node::Method.new(term.text_value)

        if params.elements
          m.params = parameters
        end

        if label.elements
          m.label = label.term.text_value
        end
        node.methods += [m]
      end

      def parameters
        [params.first_param.text_value] + params.rest_params.elements.map{|p| p.param.text_value}
      end

    }
  end

  rule statics_decl
    allow_space ':'? 'static' std:(static_decl)+ {
      def update_node(node)
        std.elements.each {|x| x.update_node(node)}
      end
    }
  end

  rule static_decl
    allow_space label:term label_decl {
      def update_node(node)
        node.statics += [Tequila::Node::Static.new(label.text_value, label_decl.term.text_value)]
      end
    }
  end

  rule code_decl
    allow_space ':'? 'code' label_decl code:(!eob . )* code_end {
      def update_node(node)
        node.code_blocks += [Tequila::Node::CodeBlock.new(label_decl.term.text_value, code.text_value)]
      end
    }
  end

  rule label_decl
    allow_space ('=>'/'label') allow_space data_mark? term
  end

  rule code_end
    eob
  end

  rule eob #end of block
    allow_space 'end'
  end

  rule term
    [a-zA-Z0-9_\?\!]+
  end

  rule must_space
    white_space+
  end

  rule allow_space
    white_space*
  end

  rule white_space
    [ \n\r]
  end

  rule data_mark
    "'"
  end
end


